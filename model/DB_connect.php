<?php

/** 
 * Соединение с базой данных  и методв обработки данных для шифрования паролей используем функцию sha1()
 */
class DB_connect{
    
    static $dbh = null;
 /**
  * синглтон соеденения с базой
  */   
     static function getDbh(){
        if(self::$dbh == null) {
            try{
                $dbh = "mysql:host=localhost;dbname=users_data";
                 self:: $dbh = new Pdo($dbh, 'root', 'serj0531serj');
                 self:: $dbh->exec("SET NAMES utf8");
                 return self::$dbh;
                }catch(PDOException $e) {
                echo $e->getMessage();
                }
        }else{
            return self::$dbh;
        }
    }
    
/**
*метод проверяющий есть ли поступившие из массива POST[] данные в базе
*/    
   public function is_user($name, $password){
//echo ' In DB_connect ; password = '.$password.'<br>';       
       $dbh = self::getDbh();
       $sq = 'SELECT * FROM users  WHERE  password=:password and name=:name';
        $sth = $dbh->prepare($sq);
        $sth->execute([':password' => sha1($password), ':name' => $name]);
  // var_dump($sth);            
        $res = $sth->fetchAll(PDO::FETCH_ASSOC);
 
        return $res;
    }
    
/**
*метод заносящий пользователя в базу данных
 *  */    
    public function user_input($name, $password){
        $dbh = self::getDbh();
        $sq = 'INSERT INTO users(name, password) values(:name, :password)';
        $sth = $dbh->prepare($sq);
        //возвращает количество затронутых строк
        $sth->execute([':name' => $name, ':password' => sha1($password)]);
//print_r($dbh->lastInsertId());
        return $dbh->lastInsertId();
        
        //return($sth->fetchAll(PDO::FETCH_ASSOC));
        
    }
 /*Функция фиксирует IP при не удачной попытке войти в админку и возвращает 
количество попыток  */   
    public function num_attempt($ip){
echo 'In num_attempt  ip = '.$ip.' <br>';        
        $ip = intval($ip);
        $dbh = self::getDbh();
 /*Проверяем есть такой IP в базе данных, если нет то заносим, если есть то 
  * обновляем значение count (количество попыток) и возвращаем его  */
        $sq = 'SELECT count FROM counter WHERE ip =:ip';
        $sth = $dbh->prepare($sq);
        
        try { $sth->execute([':ip' =>$ip]);}
         catch(PDOException $e){echo $e->getMessage();}
         
          $row = $sth->fetch(PDO::FETCH_LAZY);
 //var_dump($row);       
            $count = $row['count'];
 echo 'In numm_attempt() $count = '.$count.'<br>';           
         if($count ==null || $count == 0){
 /*Заносим в базу данных новый IP*/     
          $sq = 'INSERT INTO  counter SET  ip =:ip, count=:count,permit =:permit,'
                  . ' time = now()'  ;
          $sth = $dbh->prepare($sq);
echo 'In INSERT IP = '.$ip.'<br>';         
          try { $sth->execute([':ip' =>$ip,':count'=>1,':permit'=>'true']);}
           catch(PDOException $e){echo $e->getMessage();}
            $res = $dbh->lastInsertId();
           // return $count = 1;
         }else{
 /*обновляем  count и выводим значение*/            
             $sq = 'UPDATE counter SET count=:count,'
                     . ' time=now() WHERE ip='.$ip;
             $sth = $dbh->prepare($sq);

        $count++;
 echo 'In numattempt() UPDATE count = '.$count;        
          try{$sth->execute([':count' => $count]);}
            catch(PDOException $e){echo $e->getMessage();}    
 /*выводим значение count*/  
            $sq = 'SELECT count FROM counter WHERE ip =:ip';
        $sth = $dbh->prepare($sq);
        
        $sth->execute([':ip' =>$ip]);
            $row = $sth->fetch(PDO::FETCH_LAZY);
            $count = $row['count']; 
            return $count;
         }   
    }
    
     /*Функция запрещает вход на сайт*/
    function bun($ip){
echo 'In bun <br>';        
        $dbh = self::getDbh();
        $sq = 'UPDATE counter SET permit = "false" WHERE ip =:ip';
        $sth = $dbh->prepare($sq);        
        try { $sth->execute([':ip' =>$ip]);}
         catch(PDOException $e){echo $e->getMessage();}       
         // $row = $sth->fetch(PDO::FETCH_LAZY); 
          //  $permit = $row['permit'];
           // return $permit;
         
    }
    
     /*Функция разрешает вход на сайт (прекращает бвн)*/
    function license($ip){
        $dbh = self::getDbh();
        $sq = 'UPDATE counter SET permit = "true" WHERE ip =:ip';
        $sth = $dbh->prepare($sq);       
        try { $sth->execute([':ip' =>$ip]);}
         catch(PDOException $e){echo $e->getMessage();}       
          $row = $sth->fetch(PDO::FETCH_LAZY);
            $permit = $row['permit'];
        /*обнуляем счетчик попыток*/
         $sq = 'UPDATE counter SET count = 0 WHERE ip =:ip';
        $sth = $dbh->prepare($sq);       
        try { $sth->execute([':ip' =>$ip]);}
         catch(PDOException $e){echo $e->getMessage();}    
            
            return $permit;
    }
    
    /*Функция проверяет разрешен ли вход на сайт*/
    function permit($ip){
        $dbh = self::getDbh();
        $sq = 'SELECT permit FROM counter WHERE ip =:ip';
        $sth = $dbh->prepare($sq);       
        try { $sth->execute([':ip' =>$ip]);}
         catch(PDOException $e){echo $e->getMessage();}       
          $row = $sth->fetch(PDO::FETCH_LAZY); 
            $permit = $row['permit'];
            return $permit;
    }
    
    /*Функция получает время начала бана*/
    function getTime($ip){
        $dbh = self::getDbh();
        $sq = 'SELECT time FROM counter WHERE ip =:ip';
        $sth = $dbh->prepare($sq);       
        try { $sth->execute([':ip' =>$ip]);}
         catch(PDOException $e){echo $e->getMessage();}       
          $row = $sth->fetch(PDO::FETCH_LAZY); 
            $time =time($row['time']);
  echo'time = '.$time.'<br>';          
 // echo 'endTime = '.$endTime.'<br>';    
 // $date = @date('jS F Y',122222222);
 //  echo $date.'<br>';     
    }
    
    function setEndTime($ip){
        $dbh = self::getDbh();
        /*Устанавливаем значение времени окончания бана*/ 
    //    $time =@date('U',121212121);
  //echo'$time = '.$time;      
    $sq = 'UPDATE counter SET endTime =DATE_ADD(now(),'
            . ' INTERVAL 180 SECOND) WHERE ip =:ip';
        $sth = $dbh->prepare($sq);       
        try { $sth->execute([':ip' =>$ip]);}
         catch(PDOException $e){echo $e->getMessage();}       
          
    }
   
    
    function getEndTime($ip){
        $dbh = self::getDbh();
        $sq = 'SELECT endTime FROM counter WHERE ip =:ip';
        $sth = $dbh->prepare($sq);       
        try { $sth->execute([':ip' =>$ip]);}
         catch(PDOException $e){echo $e->getMessage();}       
          $row = $sth->fetch(PDO::FETCH_LAZY); 
            $endTime =($row['endTime']);
            return ($endTime);
          //  echo'time = '.@mktime($endTime).'<br>';    
    }
    
    
}

    $db = new DB_connect();

       // $bun = $db->bun('0');
        $bun = $db->license('0');
      //   $res = $db->permit('77');
      //   echo '$res = '.$res;
    /*   */
    //$t1 = @mktime();
  //  echo '$t1  = '.$t1; 
   // echo"<br>";
   //$db->setEndTime('0');
  //  echo'<br>';
   // $t2 = $db->getEndTime('');
   // echo '$t2 = '.$t2.'<br>';
    
