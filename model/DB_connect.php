<?php

/** 
 * Соединение с базой данных  и методв обработки данных для шифрования паролей используем функцию sha1()
 */
class DB_connect{
    
    static $dbh = null;
 /**
  * синглтон соеденения с базой
  */   
     static function getDbh(){
        if(self::$dbh == null) {
            try{
                $dbh = "mysql:host=localhost;dbname=users_data";
                 self:: $dbh = new Pdo($dbh, 'root', 'serj0531serj');
                 self:: $dbh->exec("SET NAMES utf8");
                 return self::$dbh;
                }catch(PDOException $e) {
                echo $e->getMessage();
                }
        }else{
            return self::$dbh;
        }
    }
    
/**
*метод проверяющий есть ли поступившие из массива POST[] данные в базе
*/    
   public function is_user($name, $password){
//echo ' In DB_connect ; password = '.$password.'<br>';       
       $dbh = self::getDbh();
       $sq = 'SELECT * FROM users  WHERE  password=:password and name=:name';
        $sth = $dbh->prepare($sq);
        $sth->execute([':password' => sha1($password), ':name' => $name]);
  // var_dump($sth);            
        $res = $sth->fetchAll(PDO::FETCH_ASSOC);
 
        return $res;
    }
    
/**
*метод заносящий пользователя в базу данных
 *  */    
    public function user_input($name, $password){
        $dbh = self::getDbh();
        $sq = 'INSERT INTO users(name, password) values(:name, :password)';
        $sth = $dbh->prepare($sq);
        //возвращает количество затронутых строк
        $sth->execute([':name' => $name, ':password' => sha1($password)]);
//print_r($dbh->lastInsertId());
        return $dbh->lastInsertId();
        
        //return($sth->fetchAll(PDO::FETCH_ASSOC));
        
    }
 /*Функция фиксирует IP при не удачной попытке войти в админку и возвращает 
количество попыток  */   
    public function num_attempt($ip){
        $dbh = self::getDbh();
 /*Проверяем есть такой IP в базе данных, если нет то заносим, если есть то 
  * обновляем значение count (количество попыток) и возвращаем его  */
        $sq = 'SELECT count FROM counter WHERE ip =:ip';
        $sth = $dbh->prepare($sq);
        
        try { $sth->execute([':ip' =>$ip]);}
         catch(PDOException $e){echo $e->getMessage();}
         
          $row = $sth->fetch(PDO::FETCH_LAZY);
 // var_dump($row);       
            $count = $row['count'];
            
         if($count ==null){
 /*Заносим в базу данных новый IP*/     
          $sq = 'INSERT INTO  counter SET ip = :ip, count=:count'  ;
          $sth = $dbh->prepare($sq);
//echo 'In INSERT<br>';         
          try { $sth->execute([':ip' =>$ip, ':count'=>1]);}
           catch(PDOException $e){echo $e->getMessage();}
            $res = $dbh->lastInsertId();
            return $count = 1;
         }else{
 /*обновляем  count и выводим значение*/            
             $sq = 'UPDATE counter SET count=:count';
             $sth = $dbh->prepare($sq);

        $count++;
          try{$sth->execute([':count' => $count]);}
            catch(PDOException $e){echo $e->getMessage();}    
 /*выводим значение count*/  
            $sq = 'SELECT count FROM counter WHERE ip =:ip';
        $sth = $dbh->prepare($sq);
        
        $sth->execute([':ip' =>$ip]);
            $row = $sth->fetch(PDO::FETCH_LAZY);
            $count = $row['count']; 
            return $count;
         }   
    }
    
    
}

//$db = new DB_connect();
 //$res = $db->num_attempt('77');
 //echo '$res = '.$res;

